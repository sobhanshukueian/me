{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"H:\\\\sss\\\\React\\\\portfolio\\\\material-ui-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"H:\\\\sss\\\\React\\\\portfolio\\\\material-ui-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"H:\\\\sss\\\\React\\\\portfolio\\\\material-ui-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"H:\\\\sss\\\\React\\\\portfolio\\\\material-ui-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./InteractionManager\");\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Mover_1 = require(\"./Particle/Mover\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new Mover_1.Mover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = Utils_1.Plugins.getUpdaters(container);\n  }\n\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var _a;\n\n      var container = this.container;\n      var options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.addManualParticles();\n\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n\n      container.pathGenerator.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n\n      var deleted = 0;\n\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.pathGenerator.update();\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          if (plugin.update !== undefined) {\n            plugin.update(delta);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _particle = _step3.value;\n          var resizeFactor = container.canvas.resizeFactor;\n\n          if (resizeFactor) {\n            _particle.position.x *= resizeFactor.width;\n            _particle.position.y *= resizeFactor.height;\n          }\n\n          _particle.bubble.inRange = false;\n\n          var _iterator5 = _createForOfIteratorHelper(this.container.plugins),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _step5$value = _slicedToArray(_step5.value, 2),\n                  _plugin = _step5$value[1];\n\n              if (_particle.destroyed) {\n                break;\n              }\n\n              if (_plugin.particleUpdate) {\n                _plugin.particleUpdate(_particle, delta);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          this.mover.move(_particle, delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator4 = _createForOfIteratorHelper(container.particles.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle2 = _step4.value;\n\n          var _iterator6 = _createForOfIteratorHelper(this.updaters),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var updater = _step6.value;\n              updater.update(_particle2, delta);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          if (!_particle2.destroyed && !_particle2.spawning) {\n            this.interactionManager.particlesInteract(_particle2, delta);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      delete container.canvas.resizeFactor;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      if (this.needsSort) {\n        this.zArray.sort(function (a, b) {\n          return b.position.z - a.position.z || a.id - b.id;\n        });\n        this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n        this.needsSort = false;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(container.plugins),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              plugin = _step7$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.zArray),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var p = _step8.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var limit = options.particles.number.limit * container.density;\n\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent) {\n      var splitOptions = parent.options.destroy.split;\n      var options = new ParticlesOptions_1.ParticlesOptions();\n      options.load(parent.options);\n      var factor = Utils_1.getRangeValue(splitOptions.factor.value);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitOptions.particles);\n      var offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n      var position = {\n        x: parent.position.x + Utils_1.randomInRange(offset),\n        y: parent.position.y + Utils_1.randomInRange(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n      var res = this.linksFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.linksFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.trianglesFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.trianglesFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      var _iterator9 = _createForOfIteratorHelper(options.manualParticles),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n      var particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element;\n      var pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":{"version":3,"sources":["H:/sss/React/portfolio/material-ui-portfolio-master/node_modules/tsparticles/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","Mover_1","container","nextId","array","zArray","mover","Mover","limit","needsSort","lastZIndex","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","updaters","Plugins","getUpdaters","_a","options","actualOptions","handled","plugins","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","count","j","number","addParticle","pathGenerator","init","clear","draw","factor","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","removeAt","delta","particlesToDelete","update","resizeFactor","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","Point","getPosition","remove","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","length","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","p1","p2","key","Math","res","get","random","set","p3","id1","id2","id3","manualParticles","pos","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","pow","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Particles = void 0;\r\nconst Particle_1 = require(\"./Particle\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst InteractionManager_1 = require(\"./InteractionManager\");\r\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\r\nconst Mover_1 = require(\"./Particle/Mover\");\r\nclass Particles {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.nextId = 0;\r\n        this.array = [];\r\n        this.zArray = [];\r\n        this.mover = new Mover_1.Mover(container);\r\n        this.limit = 0;\r\n        this.needsSort = false;\r\n        this.lastZIndex = 0;\r\n        this.linksFreq = new Map();\r\n        this.trianglesFreq = new Map();\r\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\r\n        const canvasSize = this.container.canvas.size;\r\n        this.linksColors = new Map();\r\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\r\n        this.updaters = Utils_1.Plugins.getUpdaters(container);\r\n    }\r\n    get count() {\r\n        return this.array.length;\r\n    }\r\n    init() {\r\n        var _a;\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        this.lastZIndex = 0;\r\n        this.needsSort = false;\r\n        this.linksFreq = new Map();\r\n        this.trianglesFreq = new Map();\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particlesInitialization !== undefined) {\r\n                handled = plugin.particlesInitialization();\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        this.addManualParticles();\r\n        if (!handled) {\r\n            for (const group in options.particles.groups) {\r\n                const groupOptions = options.particles.groups[group];\r\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\r\n                    this.addParticle(undefined, groupOptions, group);\r\n                }\r\n            }\r\n            for (let i = this.count; i < options.particles.number.value; i++) {\r\n                this.addParticle();\r\n            }\r\n        }\r\n        container.pathGenerator.init();\r\n    }\r\n    redraw() {\r\n        this.clear();\r\n        this.init();\r\n        this.draw({ value: 0, factor: 0 });\r\n    }\r\n    removeAt(index, quantity = 1, group, override) {\r\n        if (!(index >= 0 && index <= this.count)) {\r\n            return;\r\n        }\r\n        let deleted = 0;\r\n        for (let i = index; deleted < quantity && i < this.count; i++) {\r\n            const particle = this.array[i];\r\n            if (!particle || particle.group !== group) {\r\n                continue;\r\n            }\r\n            particle.destroy(override);\r\n            this.array.splice(i--, 1);\r\n            const zIdx = this.zArray.indexOf(particle);\r\n            this.zArray.splice(zIdx, 1);\r\n            deleted++;\r\n        }\r\n    }\r\n    remove(particle, group, override) {\r\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\r\n    }\r\n    update(delta) {\r\n        const container = this.container;\r\n        const particlesToDelete = [];\r\n        container.pathGenerator.update();\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.update !== undefined) {\r\n                plugin.update(delta);\r\n            }\r\n        }\r\n        for (const particle of this.array) {\r\n            const resizeFactor = container.canvas.resizeFactor;\r\n            if (resizeFactor) {\r\n                particle.position.x *= resizeFactor.width;\r\n                particle.position.y *= resizeFactor.height;\r\n            }\r\n            particle.bubble.inRange = false;\r\n            for (const [, plugin] of this.container.plugins) {\r\n                if (particle.destroyed) {\r\n                    break;\r\n                }\r\n                if (plugin.particleUpdate) {\r\n                    plugin.particleUpdate(particle, delta);\r\n                }\r\n            }\r\n            this.mover.move(particle, delta);\r\n            if (particle.destroyed) {\r\n                particlesToDelete.push(particle);\r\n                continue;\r\n            }\r\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\r\n        }\r\n        for (const particle of particlesToDelete) {\r\n            this.remove(particle);\r\n        }\r\n        this.interactionManager.externalInteract(delta);\r\n        for (const particle of container.particles.array) {\r\n            for (const updater of this.updaters) {\r\n                updater.update(particle, delta);\r\n            }\r\n            if (!particle.destroyed && !particle.spawning) {\r\n                this.interactionManager.particlesInteract(particle, delta);\r\n            }\r\n        }\r\n        delete container.canvas.resizeFactor;\r\n    }\r\n    draw(delta) {\r\n        const container = this.container;\r\n        container.canvas.clear();\r\n        const canvasSize = this.container.canvas.size;\r\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\r\n        this.update(delta);\r\n        if (this.needsSort) {\r\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\r\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\r\n            this.needsSort = false;\r\n        }\r\n        for (const [, plugin] of container.plugins) {\r\n            container.canvas.drawPlugin(plugin, delta);\r\n        }\r\n        for (const p of this.zArray) {\r\n            p.draw(delta);\r\n        }\r\n    }\r\n    clear() {\r\n        this.array = [];\r\n        this.zArray = [];\r\n    }\r\n    push(nb, mouse, overrideOptions, group) {\r\n        this.pushing = true;\r\n        for (let i = 0; i < nb; i++) {\r\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\r\n        }\r\n        this.pushing = false;\r\n    }\r\n    addParticle(position, overrideOptions, group) {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        const limit = options.particles.number.limit * container.density;\r\n        if (limit > 0) {\r\n            const countToRemove = this.count + 1 - limit;\r\n            if (countToRemove > 0) {\r\n                this.removeQuantity(countToRemove);\r\n            }\r\n        }\r\n        return this.pushParticle(position, overrideOptions, group);\r\n    }\r\n    addSplitParticle(parent) {\r\n        const splitOptions = parent.options.destroy.split;\r\n        const options = new ParticlesOptions_1.ParticlesOptions();\r\n        options.load(parent.options);\r\n        const factor = Utils_1.getRangeValue(splitOptions.factor.value);\r\n        options.color.load({\r\n            value: {\r\n                hsl: parent.getFillColor(),\r\n            },\r\n        });\r\n        if (typeof options.size.value === \"number\") {\r\n            options.size.value /= factor;\r\n        }\r\n        else {\r\n            options.size.value.min /= factor;\r\n            options.size.value.max /= factor;\r\n        }\r\n        options.load(splitOptions.particles);\r\n        const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\r\n        const position = {\r\n            x: parent.position.x + Utils_1.randomInRange(offset),\r\n            y: parent.position.y + Utils_1.randomInRange(offset),\r\n        };\r\n        return this.pushParticle(position, options, parent.group, (particle) => {\r\n            if (particle.size.value < 0.5) {\r\n                return false;\r\n            }\r\n            particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\r\n            particle.splitCount = parent.splitCount + 1;\r\n            particle.unbreakable = true;\r\n            setTimeout(() => {\r\n                particle.unbreakable = false;\r\n            }, 500);\r\n            return true;\r\n        });\r\n    }\r\n    removeQuantity(quantity, group) {\r\n        this.removeAt(0, quantity, group);\r\n    }\r\n    getLinkFrequency(p1, p2) {\r\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\r\n        let res = this.linksFreq.get(key);\r\n        if (res === undefined) {\r\n            res = Math.random();\r\n            this.linksFreq.set(key, res);\r\n        }\r\n        return res;\r\n    }\r\n    getTriangleFrequency(p1, p2, p3) {\r\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\r\n        if (id1 > id2) {\r\n            [id2, id1] = [id1, id2];\r\n        }\r\n        if (id2 > id3) {\r\n            [id3, id2] = [id2, id3];\r\n        }\r\n        if (id1 > id3) {\r\n            [id3, id1] = [id1, id3];\r\n        }\r\n        const key = `${id1}_${id2}_${id3}`;\r\n        let res = this.trianglesFreq.get(key);\r\n        if (res === undefined) {\r\n            res = Math.random();\r\n            this.trianglesFreq.set(key, res);\r\n        }\r\n        return res;\r\n    }\r\n    addManualParticles() {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        for (const particle of options.manualParticles) {\r\n            const pos = particle.position\r\n                ? {\r\n                    x: (particle.position.x * container.canvas.size.width) / 100,\r\n                    y: (particle.position.y * container.canvas.size.height) / 100,\r\n                }\r\n                : undefined;\r\n            this.addParticle(pos, particle.options);\r\n        }\r\n    }\r\n    setDensity() {\r\n        const options = this.container.actualOptions;\r\n        for (const group in options.particles.groups) {\r\n            this.applyDensity(options.particles.groups[group], 0, group);\r\n        }\r\n        this.applyDensity(options.particles, options.manualParticles.length);\r\n    }\r\n    applyDensity(options, manualCount, group) {\r\n        var _a;\r\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\r\n            return;\r\n        }\r\n        const numberOptions = options.number;\r\n        const densityFactor = this.initDensityFactor(numberOptions.density);\r\n        const optParticlesNumber = numberOptions.value;\r\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\r\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\r\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\r\n        this.limit = numberOptions.limit * densityFactor;\r\n        if (particlesCount < particlesNumber) {\r\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\r\n        }\r\n        else if (particlesCount > particlesNumber) {\r\n            this.removeQuantity(particlesCount - particlesNumber, group);\r\n        }\r\n    }\r\n    initDensityFactor(densityOptions) {\r\n        const container = this.container;\r\n        if (!container.canvas.element || !densityOptions.enable) {\r\n            return 1;\r\n        }\r\n        const canvas = container.canvas.element;\r\n        const pxRatio = container.retina.pixelRatio;\r\n        return (canvas.width * canvas.height) / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\r\n    }\r\n    pushParticle(position, overrideOptions, group, initializer) {\r\n        try {\r\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\r\n            let canAdd = true;\r\n            if (initializer) {\r\n                canAdd = initializer(particle);\r\n            }\r\n            if (!canAdd) {\r\n                return;\r\n            }\r\n            this.array.push(particle);\r\n            this.zArray.push(particle);\r\n            this.nextId++;\r\n            return particle;\r\n        }\r\n        catch (e) {\r\n            console.warn(`error adding particle: ${e}`);\r\n            return;\r\n        }\r\n    }\r\n}\r\nexports.Particles = Particles;\r\n"]},"metadata":{},"sourceType":"script"}